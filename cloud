#!/usr/bin/env python
#
# cloud - an easy to use tool for spawning disposable VM on an Openstack
#         cloud
#
# Francois Deppierraz <francois.deppierraz@nimag.net>
#
# License GPLv2+ applies

import os
import sys
import re
import time
import subprocess
import pickle
import tempfile
import logging
import argparse
import ipaddr
from os import environ as env
from getpass import getpass
import novaclient
from keystoneclient.auth.identity import v2
from keystoneclient import session
from keystoneclient.v2_0 import client as keystone_client
from novaclient import client as nova_client
from neutronclient.v2_0 import client as neutron_client
from cinderclient.v1 import client as cinder_client

IMAGE     = 'ubuntu|trusty'
FLAVOR    = 'm1.small'
KEY_NAME  = os.environ['OS_USERNAME']
NAME      = 'cloud-script-disposable-vm'

KNOWN_HOSTS = tempfile.NamedTemporaryFile()
CLEANUPS = []

def setup_environment():
  if not 'OS_PASSWORD' in os.environ:
    try:
        source = '. ~/.openrc'
        dump = '/usr/bin/python -c "import os,pickle;print pickle.dumps(os.environ)"'
        penv = os.popen('%s && %s' %(source,dump))
        env = pickle.loads(penv.read())
        os.environ = env
    except:
        pass

  if not 'OS_PASSWORD' in os.environ:
    password = getpass("OS Password: ")
    os.environ['OS_PASSWORD'] = password

def ssh(args):
  logging.debug("ssh " + repr(args))
  return subprocess.call(['ssh', '-q', '-o', 'StrictHostKeyChecking=no', '-o', 'UserKnownHostsFile=%s' % KNOWN_HOSTS.name] + args)

def scp(args):
  logging.debug("scp" + repr(args))
  return subprocess.call(['scp', '-q', '-o', 'StrictHostKeyChecking=no', '-o', 'UserKnownHostsFile=%s' % KNOWN_HOSTS.name] + args)

def get_floating_ip_pool(nova):
  if args.floating_ip_pool:
    for p in nova.floating_ip_pools.list():
      logging.debug('Nova floating ip pool: %s', p)
      if p.name == args.floating_ip_pool:
        return p

    # No specified pool found
    raise Exception('Floating IP pool %s not found', args.floating_ip_pool)
  else:
    # No specific pool request, let's just return the first one
    return nova.floating_ip_pools.list()[0]

def get_global_ip(nova, instance):
  logging.debug("Instance addresses: %s", instance.addresses)
  for net in instance.addresses:
    for address in instance.addresses[net]:
      ip = ipaddr.IPAddress(address['addr'])

      if not ip.is_private:
        if args.prefer_ipv4 and ip.version != 4:
          logging.debug("%s address is not IPv4", ip)
          continue

        if args.prefer_ipv6 and ip.version != 6:
          logging.debug("%s address is not IPv6", ip)
          continue

        logging.debug("Found global IP address: %s", ip)
        return ip

  if args.no_floating_ip:
    return ip

  pool = get_floating_ip_pool(nova)

  ip = nova.floating_ips.create(pool.name)
  CLEANUPS.append(ip)
  logging.debug("Floating IP %s" % ip.ip)
  instance.add_floating_ip(ip)
  return ip.ip

def get_flavor(nova, name):
  for flavor in nova.flavors.list():
    if name in flavor.name:
      return flavor
  raise Exception('No flavor %s found' % flavor)

def get_nics(neutron, keystone, net):
  try:
    neutron.list_networks()
  except Exception, e:
    logging.warn("No neutron support found, let's hope nova will handle the network")
    logging.exception(e)
    return None

  if net:
    nets = neutron.list_networks(name=net)['networks']

    try:
      nics = [{'net-id': nets[0]['id']}]
    except novaclient.exceptions.NotFound:
      raise Exception("Network %s not found" % net)
  else:
    # From horizon/openstack_dashboard/api/neutron.py network_list_for_tenant()
    nets = neutron.list_networks(tenant_id=keystone.tenant_id, shared=False)['networks']
    nets += neutron.list_networks(shared=True)['networks']

    assert(len(nets) > 0)
    if len(nets) == 1:
      net = nets[0]['id']
      logging.debug("Connecting instance to the only available network %s", net)
      nics = [{'net-id': net}]
    else:
      raise Exception("Multiple networks found (%s), please specify which one the instance should use with --net" % [net['name'] for net in nets])

  return nics

def find_image(nova, args):
  for image in nova.images.list():
    if image.name and re.match(args.image, image.name, re.IGNORECASE):
      return image.id

  raise Exception("Image %s not found!" % args.image)

def get_bdm(nova, args):
  image_id = find_image(nova, args)

  if args.volume:

    cinder = cinder_client.Client(
      os.environ['OS_USERNAME'],
      os.environ['OS_PASSWORD'],
      os.environ['OS_TENANT_NAME'],
      os.environ['OS_AUTH_URL']
    )

    logging.debug("Create a new volume of type %s based on image %s of size %d GB" % (args.volume_type, image_id, args.volume_size))
    volume = cinder.volumes.create(size=args.volume_size, volume_type=args.volume_type, imageRef=image_id)
    CLEANUPS.append(volume)

    logging.debug("Volume %s created" % volume.id)

    # Wait for volume creation
    while True:
      volume.get()

      if volume.status == 'available':
        break
      if volume.status == 'error':
        raise Exception('Volume creation failed')
      else:
        logging.debug("Volume status: %s" % (volume.status))
        time.sleep(10)

    logging.debug("Boot from volume %s", volume)
    bdm = [{
      'uuid': volume.id,
      'source_type': 'volume',
      'destination_type': 'volume',
      'delete_on_termination': True,
      'boot_index': 0
    }]
    image = None
  else:
    bdm = None
    image = image_id

  return bdm, image

def main(args):
  logging.debug("Connecting to Openstack cloud at %s" % (os.environ['OS_AUTH_URL']))

  try:
    auth = v2.Password(
      auth_url=env['OS_AUTH_URL'],
      username=env['OS_USERNAME'],
      password=env['OS_PASSWORD'],
      tenant_name=env['OS_TENANT_NAME'])
    sess = session.Session(auth=auth)

    nova = nova_client.Client('2', session=sess)
    neutron = neutron_client.Client(session=sess)
    keystone = keystone_client.Client(session=sess)

    flavor = get_flavor(nova, args.flavor)
    nics = get_nics(neutron, keystone, args.net)
    bdm, image = get_bdm(nova, args)

    instance = nova.servers.create(
      name=args.name,
      image=image,
      flavor=flavor.id,
      key_name=args.key_name,
      nics=nics,
      block_device_mapping_v2 = bdm,
      availability_zone = args.availability_zone
    )
    CLEANUPS.insert(0, instance)

    logging.debug("Instance %s" % instance.id)

    while True:
      instance.get()
      logging.debug("Instance status: %s" % instance.status)
      if instance.status == 'ERROR':
        raise Exception('Instance creation failure')
      if instance.addresses != {}:
        logging.debug("IP addresses present")
        break
      else:
        time.sleep(1)

    ssh_ip = get_global_ip(nova, instance)
    logging.debug("Globally reachable IP: %s", ssh_ip)

    try:
      instance.add_security_group(args.secgroup)

    # default security group not found, create it
    except novaclient.exceptions.NotFound:
      if args.secgroup == 'all':
        secgroup = nova.security_groups.create('all', 'The world famous any any rule')
        nova.security_group_rules.create(secgroup.id, 'icmp', '-1', '-1', '0.0.0.0/0') 
        nova.security_group_rules.create(secgroup.id, 'udp', '1', '65535', '0.0.0.0/0') 
        nova.security_group_rules.create(secgroup.id, 'tcp', '1', '65535', '0.0.0.0/0') 
        instance.add_security_group(secgroup.id)

    # API not supported by rackspace cloud
    except novaclient.exceptions.BadRequest:
      pass

    while True:
      res = ssh(['%s@%s' % (args.user, ssh_ip), 'echo'])
      if res == 0:
        break
      else:
        time.sleep(5)

    if args.script:
      logging.debug("Executing user supplied script: %s", args.script)
      scp([os.path.abspath(args.script), '%s@%s:/tmp/script' % (args.user, ssh_ip)])
      if args.root:
        ssh(['-t', '%s@%s' % (args.user, ssh_ip), 'chmod +x /tmp/script && sudo /tmp/script'])
      else:
        ssh(['-t', '%s@%s' % (args.user, ssh_ip), 'chmod +x /tmp/script && /tmp/script'])
    elif args.command:
      logging.debug("Executing user supplied command: %s", args.command)
      ssh(['-t', '%s@%s' % (args.user, ssh_ip), args.command])
    else:
      logging.debug("Executing interactive shell")
      ssh(['-t', '%s@%s' % (args.user, ssh_ip)])

  finally:
    if not args.permanent:
      logging.debug("Cleanup...")

      for cleanup in CLEANUPS:
        try:
          cleanup.delete()
          logging.debug("%s deleted", cleanup)
        except:
          logging.warn("Deletion of resource %s failed", cleanup)

def usage():
  print("Usage: %s [script]" % sys.argv[0])

if __name__ == '__main__':
  global DEBUG

  parser = argparse.ArgumentParser(description='Easy to use tool for spawning disposable VM on an Openstack')
  parser.add_argument('--debug', '-d', action='store_true')
  parser.add_argument('--image', '-i', default=IMAGE)
  parser.add_argument('--flavor', '-f', default=FLAVOR)
  parser.add_argument('--name', '-n', default=NAME)
  parser.add_argument('--net')
  parser.add_argument('--no-floating-ip', action='store_true')
  parser.add_argument('--floating-ip-pool')
  parser.add_argument('--permanent', '-p', action='store_true')
  parser.add_argument('--root', '-r', action='store_true')
  parser.add_argument('--command', '-c')
  parser.add_argument('--key-name', '-k', default=KEY_NAME, help='SSH key pair username (created with nova keypair or from the OS web interface)')
  parser.add_argument('--volume', '-v', action='store_true')
  parser.add_argument('--volume-size', '-s', type=int, default=10)
  parser.add_argument('--volume-type', '-t')
  parser.add_argument('--user', '-u', default='ubuntu')
  parser.add_argument('--secgroup', default='all')
  parser.add_argument('--availability_zone', '-az')

  group = parser.add_mutually_exclusive_group()
  group.add_argument('--prefer-ipv4', '-4', action='store_true')
  group.add_argument('--prefer-ipv6', '-6', action='store_true')

  parser.add_argument('script', nargs='?', default=False, help='Script that will automatically be run inside the VM')
  args = parser.parse_args()

  if args.debug:
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

    logging.getLogger('iso8601.iso8601').setLevel(logging.WARN)

  try:
    setup_environment()
    main(args)
  finally:
    KNOWN_HOSTS.close()
