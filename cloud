#!/usr/bin/env python
#
# cloud - an easy to use tool for spawning disposable VM on an Openstack
#         cloud
#
# Francois Deppierraz <francois.deppierraz@nimag.net>
#
# License GPLv2+ applies

import os
import sys
import time
import subprocess
import pickle
import tempfile
import logging
import argparse
import ipaddr
from IPython import embed
import novaclient
from novaclient.v1_1 import client as nova_client
from neutronclient.v2_0 import client as neutron_client
from neutronclient.common.exceptions import EndpointNotFound
from keystoneclient.v2_0 import client as keystone_client

IMAGE     = 'trusty-server-cloudimg-amd64'
FLAVOR    = 'm1.small'
KEY_NAME  = os.environ['OS_USERNAME']
NAME      = 'cloud-script-disposable-vm'

KNOWN_HOSTS = tempfile.NamedTemporaryFile()
CLEANUPS = []

def setup_environment():
  if not 'OS_PASSWORD' in os.environ:
    try:
        source = '. ~/.openrc'
        dump = '/usr/bin/python -c "import os,pickle;print pickle.dumps(os.environ)"'
        penv = os.popen('%s && %s' %(source,dump))
        env = pickle.loads(penv.read())
        os.environ = env
    except:
        pass

  if not 'OS_PASSWORD' in os.environ:
    raise Exception('No Openstack environnment variables found!')


def ssh(args):
  logging.debug("ssh " + repr(args))
  return subprocess.call(['ssh', '-q', '-o', 'StrictHostKeyChecking=no', '-o', 'UserKnownHostsFile=%s' % KNOWN_HOSTS.name] + args)

def scp(args):
  logging.debug("scp" + repr(args))
  return subprocess.call(['scp', '-q', '-o', 'StrictHostKeyChecking=no', '-o', 'UserKnownHostsFile=%s' % KNOWN_HOSTS.name] + args)

def get_global_ip(nt, instance):
  logging.debug("Instance addresses: %s", instance.addresses)
  for net in instance.addresses:
    for address in instance.addresses[net]:
      ip = address['addr']
      if not ipaddr.IPAddress(ip).is_private:
        logging.debug("Found global IP address: %s", ip)
        return ip

  ip = nt.floating_ips.create()
  CLEANUPS.append(ip)
  logging.debug("Floating IP %s" % ip.ip)
  instance.add_floating_ip(ip)
  return ip.ip

def get_flavor(nt, name):
  for flavor in nt.flavors.list():
    if name in flavor.name:
      return flavor
  raise Exception('No flavor %s found' % flavor)

def get_nics(keystone, net):
  neutron = neutron_client.Client(
    username=os.environ['OS_USERNAME'],
    password=os.environ['OS_PASSWORD'],
    tenant_name=os.environ['OS_TENANT_NAME'],
    auth_url=os.environ['OS_AUTH_URL']
  )

  try:
    neutron.list_networks()
  except EndpointNotFound:
    # No neutron support found, let's hope nova will handle the network
    # automatically
    return None

  if net:
    nets = neutron.list_networks(name=net)['networks']

    try:
      nics = [{'net-id': nets[0]['id']}]
    except novaclient.exceptions.NotFound:
      raise Exception("Network %s not found" % net)
  else:
    # From horizon/openstack_dashboard/api/neutron.py network_list_for_tenant()
    nets = neutron.list_networks(tenant_id=keystone.tenant_id, shared=False)['networks']
    nets += neutron.list_networks(shared=True)['networks']

    assert(len(nets) > 0)
    if len(nets) == 1:
      net = nets[0]['id']
      logging.debug("Connecting instance to the only available network %s", net)
      nics = [{'net-id': net}]
    else:
      raise Exception("Multiple networks found (%s), please specify which one the instance should use with --net" % [net['name'] for net in nets])

  return nics

def get_bdm(nt, args, image):
  if args.volume:
    logging.debug("Boot from volume based on image %s of size %d GB", image.id, args.volume_size)
    bdm = [{
      'uuid': image.id,
      'source_type': 'image',
      'destination_type': 'volume',
      'delete_on_termination': True,
      'volume_size': args.volume_size,
      'boot_index': 0
    }]
    image = None
  else:
    bdm = None
    image = image.id

  return bdm, image

def main(args):
  logging.debug("Connecting to Openstack cloud at %s" % (os.environ['OS_AUTH_URL']))

  try:
    nt = nova_client.Client(os.environ['OS_USERNAME'], os.environ['OS_PASSWORD'], os.environ['OS_TENANT_NAME'], os.environ['OS_AUTH_URL'], service_type="compute")

    keystone = keystone_client.Client(
      username=os.environ['OS_USERNAME'],
      password=os.environ['OS_PASSWORD'],
      tenant_name=os.environ['OS_TENANT_NAME'],
      auth_url=os.environ['OS_AUTH_URL']
    )

    try:
      image = filter(lambda im: args.image.lower() in im.name.lower(), nt.images.list())[0]
    except IndexError:
      logging.error("Image %s not found!" % args.image.lower())
      sys.exit(1)

    flavor = get_flavor(nt, args.flavor)
    nics = get_nics(keystone, args.net)
    bdm, image = get_bdm(nt, args, image)

    instance = nt.servers.create(
      name=args.name,
      image=image,
      flavor=flavor.id,
      key_name=args.key_name,
      nics=nics,
      block_device_mapping_v2 = bdm
    )
    CLEANUPS.append(instance)

    logging.debug("Instance %s" % instance.id)

    while True:
      instance = nt.servers.get(instance.id)
      logging.debug(instance.status)
      if instance.status == 'ERROR':
        raise Exception('Instance creation failure')
      if instance.addresses != {}:
        logging.debug("IP addresses present")
        break
      else:
        time.sleep(1)

    ssh_ip = get_global_ip(nt, instance)
    logging.debug("Globally reachable IP: %s", ssh_ip)

    try:
      instance.add_security_group(args.secgroup)

    # default security group not found, create it
    except novaclient.exceptions.NotFound:
      if args.secgroup == 'all':
        secgroup = nt.security_groups.create('all', 'The world famous any any rule')
        nt.security_group_rules.create(secgroup.id, 'icmp', '-1', '-1', '0.0.0.0/0')
        nt.security_group_rules.create(secgroup.id, 'udp', '1', '65535', '0.0.0.0/0')
        nt.security_group_rules.create(secgroup.id, 'tcp', '1', '65535', '0.0.0.0/0')
        instance.add_security_group(secgroup.id)

    # API not supported by rackspace cloud
    except novaclient.exceptions.BadRequest:
      pass

    while True:
      res = ssh(['%s@%s' % (args.user, ssh_ip), 'echo'])
      if res == 0:
        break
      else:
        time.sleep(5)

    if args.script:
      logging.debug("Executing user supplied script: %s", args.script)
      scp([os.path.abspath(args.script), '%s@%s:/tmp/script' % (args.user, ssh_ip)])
      if args.root:
        ssh(['-t', '%s@%s' % (args.user, ssh_ip), 'chmod +x /tmp/script && sudo /tmp/script'])
      else:
        ssh(['-t', '%s@%s' % (args.user, ssh_ip), 'chmod +x /tmp/script && /tmp/script'])
    elif args.command:
      logging.debug("Executing user supplied command: %s", args.command)
      ssh(['-t', '%s@%s' % (args.user, ssh_ip), args.command])
    else:
      logging.debug("Executing interactive shell")
      ssh(['-t', '%s@%s' % (args.user, ssh_ip)])

  finally:
    if not args.permanent:
      logging.debug("Cleanup...")

      for cleanup in CLEANUPS:
        cleanup.delete()
        logging.debug("%s deleted", cleanup)

def usage():
  print("Usage: %s [script]" % sys.argv[0])

if __name__ == '__main__':
  global DEBUG

  parser = argparse.ArgumentParser(description='Easy to use tool for spawning disposable VM on an Openstack')
  parser.add_argument('--debug', '-d', action='store_true')
  parser.add_argument('--image', '-i', default=IMAGE)
  parser.add_argument('--flavor', '-f', default=FLAVOR)
  parser.add_argument('--name', '-n', default=NAME)
  parser.add_argument('--net')
  parser.add_argument('--permanent', '-p', action='store_true')
  parser.add_argument('--root', '-r', action='store_true')
  parser.add_argument('--command', '-c')
  parser.add_argument('--key-name', '-k', default=KEY_NAME, help='SSH key pair username (created with nova keypair or from the OS web interface)')
  parser.add_argument('--volume', '-v', action='store_true')
  parser.add_argument('--volume-size', '-s', type=int, default=10)
  parser.add_argument('--user', '-u', default='ubuntu')
  parser.add_argument('--secgroup', default='all')
  parser.add_argument('script', nargs='?', default=False, help='Script that will automatically be run inside the VM')
  args = parser.parse_args()

  if args.debug:
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)

  try:
    setup_environment()
    main(args)
  finally:
    KNOWN_HOSTS.close()
